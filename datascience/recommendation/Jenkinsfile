#!groovy

def SERVICE_VERSION = env.BUILD_NUMBER
def SERVICE_IMAGE = "scrgt-bdso-recommendation";
def DOCKER_REGISTRY = "salientcrgt2"
def DOCKER_HUB_TOKEN = "docker-login"
def CREDENTIALS_ID = 'GitHubAccessToken';

def OCP_CLUSTER_TOKEN="ocpToken"
def OCP_CLUSTER="OCP_CLUSTER"
def OCP_PROJECT="useradmin"

node {

    try {
      stage ('Initialize') {

        // Git Checkout the CI Branch
        checkout([$class: 'GitSCM',
        branches: [[name: GIT_BRANCH]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[$class: 'WipeWorkspace']], submoduleCfg: [],
        userRemoteConfigs: [[credentialsId: CREDENTIALS_ID, url: GIT_REPO_URL]]])


      }
      stage ('Build') {
          withEnv(['BUILD_NUMBER=build=' + env.BUILD_NUMBER,
              'BNUMBER=' + env.BUILD_NUMBER,
              'MS_IMAGE_ID='+ DOCKER_REGISTRY+'/'+SERVICE_IMAGE+':'+SERVICE_VERSION]) {

                  println "====Build ====="

                  sh returnStdout: false, script: '''
                    cd $WORKSPACE/recommendation
                    docker build -t ${MS_IMAGE_ID} .
                '''
                println "====Build done, compile reports ====="

          }
      }
      stage ('SonarQube') {
          def scannerHome = tool 'BDSOSonarScanner';
          withSonarQubeEnv('BDSOSonar') {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=$SERVICE_IMAGE  \
            -Dsonar.sources=$WORKSPACE/recommendation/scripts/face_recognition"
          }

      }
      stage ('OWASP Dependency Check') {
        dependencyCheck additionalArguments: '', odcInstallation: 'default 5.2.1 '
        dependencyCheckPublisher pattern: ''
        archiveArtifacts 'dependency-check-report.xml'
      }
      stage ('Push to DockerHub') {

        println "====Push to DockerHub ====="
        withEnv(['MS_IMAGE_ID='+ DOCKER_REGISTRY+'/'+SERVICE_IMAGE+':'+SERVICE_VERSION,
        'LATEST_IMAGE_ID='+ DOCKER_REGISTRY+'/'+SERVICE_IMAGE+':latest']) {
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding',
            credentialsId:DOCKER_HUB_TOKEN,
            passwordVariable:'DOCKER_PASSWORD',
            usernameVariable:'DOCKER_USERNAME']
            ]) {
            sh returnStdout: false, script: '''
              docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
              echo ${MS_IMAGE_ID}
              docker push ${MS_IMAGE_ID}
              docker tag ${MS_IMAGE_ID} ${LATEST_IMAGE_ID}
              docker push ${LATEST_IMAGE_ID}
              '''
            }
          }
        }

        stage ('Deploy To Dev') {
          println "==== Deploy To Dev ====="
          DEPLOY_ENV="dev"
          deployToEnv(DEPLOY_ENV, DOCKER_REGISTRY, SERVICE_IMAGE, SERVICE_VERSION, OCP_URL, OCP_CLUSTER_TOKEN);
        }

        stage ('Deploy To Test') {
          println "==== Deploy To Test ====="
          DEPLOY_ENV="test"
          deployToEnv(DEPLOY_ENV, DOCKER_REGISTRY, SERVICE_IMAGE, SERVICE_VERSION, OCP_URL, OCP_CLUSTER_TOKEN);
        }
        stage ('Regression in Test Env') {
          println "====Dummy --- Regression in Test Env ====="

        }
        stage ('Deploy To Prod') {
          println "==== Deploy To Prod ====="
          DEPLOY_ENV="prod"
          deployToEnv(DEPLOY_ENV, DOCKER_REGISTRY, SERVICE_IMAGE, SERVICE_VERSION, OCP_URL, OCP_CLUSTER_TOKEN);
        }

    }
    finally {
      stage('Finalize') {
        println "==== Cleanup ====="
      }
    }

}

def deployToEnv(deploy_env, docker_registry, service_image, service_version, ocp_url, ocp_cluster_token) {
  println "==== Deploy To ENV ===== "
  withEnv(['MS_IMAGE_ID=docker.io/'+ docker_registry+'/'+service_image+':'+service_version,
  'IMAGETAG='+ service_image+':'+service_version,
  'OCP_URL='+ ocp_url,
  'APP_NAME='+service_image,
  'APP_VERSION='+service_version,
  'DEPLOY_ENV='+deploy_env]) {

    withCredentials([
      [$class: 'UsernamePasswordMultiBinding',
      credentialsId:ocp_cluster_token,
      passwordVariable:'OCP_PASSWORD',
      usernameVariable:'OCP_USERNAME']
      ]) {
        sh """
            oc login --username=${env.OCP_USERNAME} --password=${env.OCP_PASSWORD} --insecure-skip-tls-verify ${OCP_URL}

            echo ${MS_IMAGE_ID}
            oc project ${DEPLOY_ENV}

            oc import-image ${IMAGETAG} --from ${MS_IMAGE_ID} --confirm

            oc process -f $WORKSPACE/recommendation/openshift/deploy-template.yml \
              -p APP_NAME=${APP_NAME} \
              -p APP_VERSION=${APP_VERSION} \
              -p PROJECT_NAME=${APP_NAME} \
              | oc apply -f -
          """
      }

    }

}
